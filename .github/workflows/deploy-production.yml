name: Deploy to Production
run-name: ${{ github.actor }} is deploying to production üöÄ

on:
  push:
    branches: [116-refer-producci√≥]

jobs:
  CONEXIO-SERVIDOR:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          echo "${{ secrets.PROD_SSH_PRIVATE_KEY }}" > ~/prod_key.pem
          chmod 600 ~/prod_key.pem

      - name: Conect to SSH i actualizaciones servidor
        run: |
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/prod_key.pem ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }} << 'EOF'
            echo "üöÄ Iniciando actualizaciones e instalar dependencies..."

            # Actualizar sistema m√°quina producci√≥n
            sudo apt update && sudo apt upgrade -y

            # Asegurar que Docker est√© corriendo
            sudo systemctl enable docker
            sudo systemctl start docker

            # Crear la carpeta si no existe
            if [ ! -d "/opt/conexus/front-vue" ]; then
              sudo mkdir -p /opt/conexus/front-vue
            fi

            if [ ! -d "/opt/conexus/back-node" ]; then
              sudo mkdir -p /opt/conexus/back-node
            fi
          EOF

  SECRETS-GITHUB:
    needs: [CONEXIO-SERVIDOR]
    runs-on: ubuntu-latest
    steps:
      - name: Obtener variables de entorno
        uses: actions/checkout@v4

      - name: Update docker compose
        run: |
          echo "Afegir variables d'entorn al .env"
          echo "${{ secrets.PROD_SSH_PRIVATE_KEY }}" > ~/prod_key.pem
          chmod 600 ~/prod_key.pem

          echo "" >> .env.prod

          # Copiar .env.prod al servidor y renombrarlo .env
          scp -o StrictHostKeyChecking=no -i ~/prod_key.pem .env.prod ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }}:/opt/conexus/.env
          
          # Conectarse por SSH y a√±adir las variables sensibles
          ssh -o StrictHostKeyChecking=no -i ~/prod_key.pem ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }} <<EOF
          echo "üîê Afegint secrets al fitxer .env..."

          echo "MYSQL_USER=${{ secrets.MYSQL_DB_USER }}" >> /opt/conexus/.env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_DB_PASSWORD }}" >> /opt/conexus/.env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> /opt/conexus/.env
          echo "NODE_SECRET_KEY_TOKEN=${{ secrets.NODE_SECRET_KEY_TOKEN}}" >> /opt/conexus/.env

          # A√±adir variables del contenedor nginx db
          echo "NGINX_DB_ROOT_PASSWORD=${{ secrets.NGINX_DB_ROOT_PASSWORD }}" >> /opt/conexus/.env
          echo "NGINX_DB_USER=${{ secrets.NGINX_DB_USER }}" >> /opt/conexus/.env
          echo "NGINX_DB_PASSWORD=${{ secrets.NGINX_DB_PASSWORD }}" >> /opt/conexus/.env

          echo "‚úÖ .env completat!"
          EOF

  BUILD-FRONTEND-AND-BUILD-PORTAINER:
    needs: [CONEXIO-SERVIDOR, SECRETS-GITHUB]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Instalar dependencias y construir frontend
        run: |
          cd front-vue
          npm install
          npm run build

      - name: Subir los archivos de frontend construidos al servidor remoto y crear carpeta front-vue
        run: |
          echo "${{ secrets.PROD_SSH_PRIVATE_KEY }}" > ~/prod_key.pem
          chmod 600 ~/prod_key.pem

          ssh -o StrictHostKeyChecking=no -i ~/prod_key.pem ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }} << 'EOF'
          cd /opt/conexus 

          if [ -d ./front-vue ]; then 
            sudo rm -r ./front-vue
          fi 
          mkdir front-vue
          EOF

          # Subir los archivos generados en dist al servidor
          scp -r -o StrictHostKeyChecking=no -i ~/prod_key.pem front-vue/dist ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }}:/opt/conexus/front-vue/

      - name: Copiar prod.Dockerfile al servidor
        run: |
          echo "${{ secrets.PROD_SSH_PRIVATE_KEY }}" > ~/prod_key.pem
          chmod 600 ~/prod_key.pem

          # Copiar el prod.Dockerfile al servidor en la carpeta front-vue
          scp -o StrictHostKeyChecking=no -i ~/prod_key.pem front-vue/prod.Dockerfile ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }}:/opt/conexus/front-vue/

      - name: Levantar contenedor de Portainer
        run: |
            echo "${{ secrets.PROD_SSH_PRIVATE_KEY }}" > ~/prod_key.pem
            chmod 600 ~/prod_key.pem

            ssh -o StrictHostKeyChecking=no -i ~/prod_key.pem ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }} << 'EOF'
            echo "üö¢ Limpiando contenedores antiguos..."
            cd /opt/conexus

            echo "üîß Levantando Portainer..."
            if [ -f docker-compose.portainer.yml ]; then
              docker-compose -f docker-compose.portainer.yml up -d --build
            fi

            echo "üéâ Despliegue portainer completado"
            EOF

  BUILD-BACKEND:
    needs: [BUILD-FRONTEND-AND-BUILD-PORTAINER]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Instalar dependencias y construir backend
        run: |
          cd back-node/node
          npm install --production  # Solo instalar dependencias de producci√≥n
      
      - name: Subir archivos del backend al servidor
        run: |
            echo "${{ secrets.PROD_SSH_PRIVATE_KEY }}" > ~/prod_key.pem
            chmod 600 ~/prod_key.pem
    
            ssh -o StrictHostKeyChecking=no -i ~/prod_key.pem ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }} << 'EOF'
            cd /opt/conexus

            
    
            # Limpiar si la carpeta de backend existe
            if [ -d ./back-node ]; then 
              sudo rm -r ./back-node
            fi
            # Crear la carpeta para el backend
            mkdir back-node

            EOF
    
            # Subir los archivos de backend (node y data) al servidor
            scp -r -o StrictHostKeyChecking=no -i ~/prod_key.pem back-node/node ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }}:/opt/conexus/back-node
            scp -r -o StrictHostKeyChecking=no -i ~/prod_key.pem back-node/data ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }}:/opt/conexus/back-node
      
      - name: Copiar prod.Dockerfile al servidor
        run: |
          echo "${{ secrets.PROD_SSH_PRIVATE_KEY }}" > ~/prod_key.pem
          chmod 600 ~/prod_key.pem

          # Copiar el prod.Dockerfile al servidor en la carpeta back-node
          scp -o StrictHostKeyChecking=no -i ~/prod_key.pem back-node/node/prod.Dockerfile ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }}:/opt/conexus/back-node/node/


  START-DOCKER-COMPOSE-PRINCIPAL:
    needs: [BUILD-FRONTEND-AND-BUILD-PORTAINER, BUILD-BACKEND]
    runs-on: ubuntu-latest
    steps:
      - name: Conectar a la m√°quina de producci√≥n y levantar contenedores
        run: |
          echo "${{ secrets.PROD_SSH_PRIVATE_KEY }}" > ~/prod_key.pem
          chmod 600 ~/prod_key.pem

          ssh -o StrictHostKeyChecking=no -i ~/prod_key.pem ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }} << 'EOF'
            echo "üö¢ Levantando contenedores Docker..."

            set -e  # Aborta el script si algo falla
            cd /opt/conexus

            if [ -f docker-compose.prod.yml ]; then
              echo "üîß Levantando Backend y Frontend..."
              docker-compose -f docker-compose.prod.yml up -d --build
            else
              echo "‚ùå No se encontr√≥ el archivo docker-compose.prod.yml"
              exit 1
            fi

            echo "üéâ Contenedores levantados con √©xito"
          EOF
